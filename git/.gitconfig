[user]
	name = Andrew Lechowicz
	email = andrew@alecho.com
	signingKey = 1B42243108A704D1
[mergetool]
	keepBackup = true
[help]
	autocorrect = 60
[alias]
	aa = add --all
	aaaa = "!git add --all && git commit --amend"
  abom = absorb --base origin/main
	amend = commit --amend
	b = branch
	bD = branch -D
	bDf = "!git branch -D $(git branch | fzf)"
	ba = branch -a
	bd = branch -d
	bdf = "!git branch -d $(git branch | fzf)"
	br = branch -r
	c = commit -v
	ca = commit -a --v
	cm = commit -v -m
	cnv = commit -v --no-verify
	cnvm = commit -v --no-verify -m
	clear = "!clear"
	co = checkout
	cof = "!git checkout $(git branch | fzf)"
	com = "!git checkout ${TRUNK_BRANCH:-main}"
	cob = "!git checkout $(git remote show origin | grep 'HEAD branch' | sed 's/.*: //')"
	cod = "!git checkout ${DEVELOP_BRANCH:-develop}"
	cp = cherry-pick
	cpc = cherry-pick --continue
	di = diff
	ds = diff --staged
	diw = diff --word-diff
	word-diff = diff --word-diff
	dt = difftool
	f = fetch
	fap = fetch --all --prune
	faprom = "!git fap && git rom"
	fix = "!f() { ${EDITOR} `git diff --name-only --diff-filter=U`; }; f"
	fixup = commit --fixup
	fixupf = "!git commit --fixup $(git log --oneline | fzf | awk '{print $1}')"
	fu = "!f() { git log master..HEAD --reverse --format=\"%C(auto)%h %s\" | fzf --ansi --reverse --preview \"git show --color=always {1}\" --preview-window=up:50% --bind \"enter:execute(git commit --fixup {1})+abort\" --header=\"Select a commit to fixup\" | true; }; f"
	graph = log --graph --oneline --decorate --all
	gca = gc --aggressive
	l = "!source ~/.bash/helpers/githelpers.sh && pretty_git_log"
	la = !git l --all
	lag = !git l --graph --all
	lg = !git l --graph
	lol = !git log --oneline
	lom = "!git log origin/$(git symbolic-ref refs/remotes/origin/HEAD | gsed 's@^refs/remotes/origin/@@')"
	mt = mergetool
	new = checkout -b
  ; new = "!branch.sh"
	p = push
	pf = push --force-with-lease
	pr = pull --rebase
	publish = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
	pullall = !git pull && git submodule update --init --recursive
	r = !git l -20
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbp = rebase --show-current-patch
	rbi = rebase -i
	rbia = rebase -i --autosquash
	rbs = rebase --skip
	reopen = "!f() { ${EDITOR} $(git status --porcelain | awk '{print $2}'); }; f"
	rom = "!git rebase origin/${TRUNK_BRANCH:-main}"
	romi = "!git rebase -i origin/${TRUNK_BRANCH:-main}"
	romia = "!git rebase --autosquash -i origin/${TRUNK_BRANCH:-main}"
	rop = rebase origin/production
	ropi = rebase -i origin/production
	s = status -sb
	sh = show
	st = stash
	stl = stash --list
	staged = diff --staged
	sw = "!f() { git branch --sort=-committerdate --format=\"%(refname:short) | %(committerdate:relative)\" | fzf --ansi --delimiter=\" | \" --with-nth=1 | cut -d\" \" -f1 | xargs -r git checkout; }; f"
	sup = submodule update --init --recursive
	uncommit = reset --soft 'HEAD~'
	undo = reset --soft 'HEAD^'
	whatadded = log --diff-filter=A
  whyfail = "!git bisect start; git bisect bad; git bisect good origin/$(git symbolic-ref refs/remotes/origin/HEAD | gsed 's@^refs/remotes/origin/@@'); git bisect run"
	wip = "!git commit --no-verify -m 'WIP :construction:'"
	worked = "!git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'"
	hash = "!f() { git checkout $(_git_hash_complete | awk \"{print \\$1}\"); }; f"
[color]
	ui = auto
[core]
	excludesfile = ~/.gitignore_global
	editor = nvim
  pager = delta
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true    # use n and N to move between diff sections
  light = false
  theme = dracula
  side-by-side = false
  line-numbers = true
[merge]
    conflictstyle = diff3
[diff]
	algorithm = histogram
  colorMoved = default
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[branch]
	autosetuprebase = always
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[push]
	default = simple
	autoSetupRemote = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[rebase]
	autosquash = true
[rerere]
	enabled = 1
[gpg]
	program = gpg
[commit]
	gpgSign = true
[merge "npm-merge-driver"]
	name = automatically merge npm lockfiles
	driver = npx npm-merge-driver merge %A %O %B %P
[init]
	defaultBranch = main
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[log]
  date = relative
[format]
  pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(8,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
[mailmap]
  file = '/Users/andrewlechowicz/.mailmap'
[include]
  path = ~/.gitconfig.local
